{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodri\\\\Documents\\\\Estudos Dev Java\\\\dscatalog\\\\front-web\\\\src\\\\core\\\\pages\\\\Catalog\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ProductCard from \"./components/ProductCard\";\nimport './styles.scss';\nimport { makeRequest } from \"../../utils/request\";\nimport ProductCardLoader from \"./components/Loaders/ProductCardLoader\";\nimport Pagination from \"core/components/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Catalog = () => {\n  _s();\n\n  //quando o componente iniciar, buscar a lista de produtos\n  //quando a lista de produtos estiver disponivel popular o um estado no componente, e listar os produtos dinamicamente.\n  const [productsResponse, setProductsResponse] = useState(); //criar um estado pro loader\n\n  const [isLoading, setIsLoading] = useState(false); //quando o componente iniciar, bucar a lista de produtos\n\n  useEffect(() => {\n    const params = {\n      page: 0,\n      linesPerPage: 12\n    }; //antes de fazer a requisicao precisa iniciar o loader\n\n    setIsLoading(true);\n    makeRequest({\n      url: '/products',\n      params\n    }).then(response => setProductsResponse(response.data)).finally(() => {\n      //finalizar o loader\n      setIsLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"catalog-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"catalog-title\",\n      children: \"Cat\\xE1logo de produtos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"catalog-products\",\n      children: isLoading ? /*#__PURE__*/_jsxDEV(ProductCardLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 30\n      }, this) : productsResponse === null || productsResponse === void 0 ? void 0 : productsResponse.content.map(product => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/products/${product.id}`,\n        children: /*#__PURE__*/_jsxDEV(ProductCard, {\n          product: product\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this)\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      totalPages: productsResponse === null || productsResponse === void 0 ? void 0 : productsResponse.totalPages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Catalog, \"RV50hjKPEsbrBqoBThNhgRBV3ME=\");\n\n_c = Catalog;\nexport default Catalog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Catalog\");","map":{"version":3,"sources":["C:/Users/rodri/Documents/Estudos Dev Java/dscatalog/front-web/src/core/pages/Catalog/index.tsx"],"names":["React","useEffect","useState","Link","ProductCard","makeRequest","ProductCardLoader","Pagination","Catalog","productsResponse","setProductsResponse","isLoading","setIsLoading","params","page","linesPerPage","url","then","response","data","finally","content","map","product","id","totalPages"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAO,eAAP;AAEA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,OAAOC,UAAP,MAAuB,4BAAvB;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB;AACA;AACA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CR,QAAQ,EAAxD,CAHkB,CAKlB;;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C,CANkB,CAQlB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,MAAM,GAAG;AACXC,MAAAA,IAAI,EAAE,CADK;AAEXC,MAAAA,YAAY,EAAE;AAFH,KAAf,CADY,CAMZ;;AACAH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAP,IAAAA,WAAW,CAAC;AAAEW,MAAAA,GAAG,EAAE,WAAP;AAAoBH,MAAAA;AAApB,KAAD,CAAX,CACKI,IADL,CACUC,QAAQ,IAAIR,mBAAmB,CAACQ,QAAQ,CAACC,IAAV,CADzC,EAEKC,OAFL,CAEa,MAAK;AACV;AACAR,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KALL;AAMH,GAdQ,EAcN,EAdM,CAAT;AAgBA,sBACI;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,gBACKD,SAAS,gBAAG,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,cAAH,GAA4BF,gBAA5B,aAA4BA,gBAA5B,uBAA4BA,gBAAgB,CAAEY,OAAlB,CAA0BC,GAA1B,CAA8BC,OAAO,iBACvE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAG,aAAYA,OAAO,CAACC,EAAG,EAAlC;AAAA,+BACI,QAAC,WAAD;AAAa,UAAA,OAAO,EAAED;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ,SAA0CA,OAAO,CAACC,EAAlD;AAAA;AAAA;AAAA;AAAA,cADkC;AAD1C;AAAA;AAAA;AAAA;AAAA,YAJJ,eAWI,QAAC,UAAD;AAAY,MAAA,UAAU,EAAEf,gBAAF,aAAEA,gBAAF,uBAAEA,gBAAgB,CAAEgB;AAA1C;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAzCD;;GAAMjB,O;;KAAAA,O;AA2CN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ProductCard from \"./components/ProductCard\";\r\nimport './styles.scss';\r\nimport axios from \"axios\";\r\nimport { makeRequest } from \"../../utils/request\";\r\nimport { ProductResponse } from \"../../types/Product\";\r\nimport ProductCardLoader from \"./components/Loaders/ProductCardLoader\";\r\nimport Pagination from \"core/components/Pagination\";\r\n\r\nconst Catalog = () => {\r\n    //quando o componente iniciar, buscar a lista de produtos\r\n    //quando a lista de produtos estiver disponivel popular o um estado no componente, e listar os produtos dinamicamente.\r\n    const [productsResponse, setProductsResponse] = useState<ProductResponse>();\r\n\r\n    //criar um estado pro loader\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    //quando o componente iniciar, bucar a lista de produtos\r\n    useEffect(() => {\r\n        const params = {\r\n            page: 0,\r\n            linesPerPage: 12\r\n        }\r\n\r\n        //antes de fazer a requisicao precisa iniciar o loader\r\n        setIsLoading(true);\r\n        makeRequest({ url: '/products', params })\r\n            .then(response => setProductsResponse(response.data))\r\n            .finally(() =>{\r\n                //finalizar o loader\r\n                setIsLoading(false);\r\n            })\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"catalog-container\">\r\n            <h1 className=\"catalog-title\">\r\n                Cat√°logo de produtos\r\n            </h1>   \r\n            <div className=\"catalog-products\">\r\n                {isLoading ? <ProductCardLoader /> : (productsResponse?.content.map(product => (\r\n                    <Link to={`/products/${product.id}`} key={product.id}>\r\n                        <ProductCard product={product} />\r\n                    </Link>\r\n                )))}\r\n            </div>\r\n            <Pagination totalPages={productsResponse?.totalPages} />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Catalog;"]},"metadata":{},"sourceType":"module"}